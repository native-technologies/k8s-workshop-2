# configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-server-config
data:
  LOG_LEVEL: DEBUG
---
# secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: api-server-secret
stringData:
  BASIC_AUTH_USERNAME: admin
  BASIC_AUTH_PASSWORD: Abcd@1234
---
# deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-server
  labels:
    app: api-server
spec:
  replicas: 3
  revisionHistoryLimit: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: api-server
  template:
    metadata:
      labels:
        app: api-server
    spec:
      containers:
        - name: api-server
          image: docker.io/nativetechnologies/orderapp:1.1.0
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: APP_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: PORT
              value: "8080"
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: api-server-config
                  key: LOG_LEVEL
            - name: BASIC_AUTH_USERNAME
              valueFrom:
                secretKeyRef:
                  name: api-server-secret
                  key: BASIC_AUTH_USERNAME
            - name: BASIC_AUTH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: api-server-secret
                  key: BASIC_AUTH_PASSWORD
          # livenessProbe:
          #   httpGet:
          #     path: /ping
          #     port: 8080
---
# service.yaml
apiVersion: v1
kind: Service
metadata:
  name: api-server-service
spec:
  selector:
    app: api-server
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
---
# ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-ingress
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    # Force SSL redirect
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - k8s.nativetechnologies.my
      secretName: domain-tls
  rules:
    - host: k8s.nativetechnologies.my
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: api-server-service
                port:
                  number: 80
---
# cluster-issuer.yaml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    email: your@email.com
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: letsencrypt-prod-private-key
    solvers:
      - http01:
          ingress:
            class: nginx
